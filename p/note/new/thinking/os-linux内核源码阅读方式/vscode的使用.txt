一。vscode使用
	1.插件安装(Ctrl+Shift+X)
		根据上面快捷键搜索安装所需插件，
		插件存储位置C:\Users\系统用户\.vscode\extensions
	2.settings(Ctrl+,)
		配置分用户与workspace两种：配置都在一个settings.json文件里面
		2.1）用户配置
		配置文件在C:\Users\FBODC\AppData\Roaming\Code\User\settings.json里面
		2.2）workspace配置
		在vscode打开的目录.vscode/settings.json里面
	3.命令面板(Ctrl+Shift+P)
		如根据上面快捷键输入并选择一个指令"Tasks: Configure Task"
		命令组成 {插件名称}: {命令名称}
	4.打开workspace目录(Ctrl+O)
		
	5.vscode打开workspace目录默认创建.vscode目录,里面的tasks.json与launch.json还会有settings.json
	vscode的tasks.json与launch.json(都在当前目录.vscode)
		在VSCode中，`tasks.json`和`launch.json`文件是用于配置自动化任务和调试会话的重要文件，它们分别属于VSCode的Tasks和Debug功能的一部分。下面是它们各自的作用和一些基本用法：

		### tasks.json
		`tasks.json`文件用于定义自动化任务，比如编译、测试、运行程序等。这个文件通常位于项目的`.vscode`目录下。

		- **编译代码**：你可以定义一个任务来编译你的代码，比如使用GCC编译C/C++程序。
		- **运行程序**：定义任务来直接运行你的程序，比如执行编译后的可执行文件。
		- **自动化脚本**：执行自定义脚本，比如清理构建目录、复制文件等。
		- **预定义和自定义任务**：VSCode允许你定义预定义任务（如build、clean等），也可以创建自定义任务来满足特定需求。

		### launch.json
		`launch.json`文件用于配置调试会话，它定义了如何启动和调试你的程序。这个文件也位于项目的`.vscode`目录下。

		- **启动配置**：定义如何启动你的程序，包括运行参数、环境变量、工作目录等。
		- **调试器设置**：配置调试器的行为，比如断点、步进、观察变量等。
		- **多环境调试**：对于需要在不同环境下调试的项目，你可以为每个环境定义不同的调试配置。
		- **附加到进程**：对于某些语言或框架，你可能需要附加到已经运行的进程进行调试，`launch.json`允许你配置这些设置。

		### 为什么需要这两个文件？
		- **自动化**：`tasks.json`允许你自动化常见的构建和运行任务，这样可以节省时间并减少手动操作的错误。
		- **灵活的调试**：`launch.json`提供了灵活的调试配置，使得开发者可以根据需要定制调试环境，提高调试效率。

		### 如何使用这两个文件？
		- **使用快捷键**：在VSCode中，你可以使用快捷键（如`Ctrl+Shift+B`运行任务，`F5`启动调试）来执行这些配置。
		- **命令面板**：通过VSCode的命令面板（`Ctrl+Shift+P`），你可以快速选择和运行任务或调试配置。

		这两个文件的配置使得VSCode成为一个强大的开发工具，能够适应各种开发和调试需求。通过自定义这些文件，你可以使你的开发流程更加高效和个性化。

二。vscode怎么配置c语言run debug
	在VSCode中配置C语言的运行和调试环境，你需要设置`launch.json`和`tasks.json`文件。以下是详细步骤：

	### 1. 安装C/C++扩展
	首先，确保你已经安装了VSCode的C/C++扩展。可以通过VSCode的扩展市场搜索并安装“C/C++”扩展。

	### 2. 配置`tasks.json`文件
	`tasks.json`文件用于定义编译任务。在VSCode中，打开命令面板（`Ctrl+Shift+P`），输入“Tasks: Configure Task”，然后选择“Create tasks.json file from template”并选择“C++ (GCC)”。

	```json
	{
		"version": "2.0.0",
		"tasks": [
			{
				"type": "shell",
				"label": "gcc build active file",
				"command": "gcc",
				"args": [
					"${file}",
					"-o",
					"${fileDirname}/${fileBasenameNoExtension}"
				],
				"options": {
					"cwd": "/usr/bin"
				},
				"problemMatcher": [
					"$gcc"
				],
				"group": {
					"kind": "build",
					"isDefault": true
				}
			}
		]
	}
	```

	### 3. 配置`launch.json`文件
	`launch.json`文件用于定义调试配置。在VSCode中，点击左侧的“运行和调试”图标，点击配置下拉菜单（小齿轮图标），选择“添加配置”，然后选择“C++ (GDB/LLDB)”。

	```json
	{
		"version": "0.2.0",
		"configurations": [
			{
				"name": "C Launch (GDB)",
				"type": "cppdbg",
				"request": "launch",
				"program": "${workspaceFolder}/${fileBasenameNoExtension}",
				"args": [],
				"stopAtEntry": false,
				"cwd": "${workspaceFolder}",
				"environment": [],
				"externalConsole": false,
				"MIMode": "gdb",
				"setupCommands": [
					{
						"description": "Enable pretty-printing for gdb",
						"text": "-enable-pretty-printing",
						"ignoreFailures": true
					}
				],
				"preLaunchTask": "gcc build active file",
				"miDebuggerPath": "/usr/bin/gdb"
			}
		]
	}
	```

	在这个配置中：
	- `"program": "${workspaceFolder}/${fileBasenameNoExtension}"` 指定了要调试的程序的路径。
	- `"preLaunchTask": "gcc build active file"` 指定了一个在调试前执行的任务，比如编译程序。
	- `"miDebuggerPath": "/usr/bin/gdb"` 指定了调试器的路径。

	### 4. 编译和调试
	- 要编译程序，你可以在VSCode中使用`Ctrl+Shift+B`快捷键运行编译任务。
	- 要开始调试，你可以在VSCode中设置断点，然后点击左侧的“运行和调试”图标，选择配置（例如“C Launch (GDB)”），然后点击“启动调试”或使用`F5`快捷键。

	确保`miDebuggerPath`指向了正确的GDB路径，如果你使用的是Windows系统，可能需要指定MinGW或Cygwin中的GDB路径。

	以上步骤应该可以帮助你在VSCode中配置C语言的运行和调试环境。如果你遇到任何问题，可以查看VSCode的官方文档或搜索相关错误信息。


三。vscode的debug操作


四。vscode的git操作


五。VSCode好用的插件
	Tabby终端工具
		https://github.com/Eugeny/tabby
			https://github.com/Eugeny/tabby/releases/download/v1.0.216/tabby-1.0.216-macos-arm64.zip
			https://github.com/Eugeny/tabby/releases/download/v1.0.216/tabby-1.0.216-linux-x64.tar.gz
	Bruno接口测试工具
	etcd-workbench ETCD客户端工具
	1.redis,zookeeper,etcd,mysql连接工具
		redis插件：Redis for VS Code
			https://github.com/qishibo/AnotherRedisDesktopManager
		zookeeper插件：Visual ZooKeeper
			zookeeper官方Admin Server服务使用
		etcd插件：
			
		数据库mysql...: 见3
			dbeaver
			127.0.0.1:2181
	2.ssh远程连接工具
		Remote Development
		Remote SSH
		Remote Explorer
		
		需要vscode连接上远程主机后安装clangd,如果安装有c/c++ Themes就禁用
		
	3.数据库连接
		Database Client
		SQLTools
		mysql

六。vscode常见名词描述
1）vscode中c/c++: (gdb)Attach (gdb)Launch区别？？？

	在VSCode中，C/C++插件提供了两种调试配置类型：`Attach (GDB)`和`Launch (GDB)`。这两种配置分别对应不同的调试场景：

	### Attach (GDB)
	- **Attach (GDB)** 配置用于附加到一个已经运行的进程。
	- 在使用`Attach (GDB)`之前，你需要先手动启动你的程序，使其在没有调试器附加的情况下运行。
	- 一旦程序运行，你可以在VSCode中选择`Attach (GDB)`配置，VSCode会启动GDB并尝试连接到已经运行的进程。
	- 这种调试方式适合于你想要调试一个已经在运行的服务或应用程序，或者当你需要在程序运行到特定状态后再开始调试时。

	### Launch (GDB)
	- **Launch (GDB)** 配置用于启动一个新的进程，并在程序的入口点处开始调试。
	- 使用`Launch (GDB)`时，VSCode会启动GDB，GDB会启动你的程序，并在程序的入口点（通常是`main`函数）处暂停执行，等待你的进一步指令。
	- 这种调试方式适合于大多数常见的调试场景，特别是当你需要从程序的开始处逐步执行代码，检查变量和程序流程时。

	### 配置示例
	在`launch.json`文件中，这两种配置看起来可能像这样：

	#### Attach (GDB) 配置示例
	```json
	{
	  "name": "Attach (GDB)",
	  "type": "cppdbg",
	  "request": "attach",
	  "program": "/path/to/your/program",
	  "processId": "${command:pickProcess}",
	  "MIMode": "gdb",
	  "miDebuggerPath": "/path/to/gdb"
	}
	```
	- `"request": "attach"` 表明这是一个附加调试的配置。
	- `"processId": "${command:pickProcess}"` 允许VSCode弹出一个列表，让你选择要附加的进程。

	#### Launch (GDB) 配置示例
	```json
	{
	  "name": "Launch (GDB)",
	  "type": "cppdbg",
	  "request": "launch",
	  "program": "${workspaceFolder}/${fileBasenameNoExtension}.exe",
	  "args": [],
	  "stopAtEntry": false,
	  "cwd": "${workspaceFolder}",
	  "environment": [],
	  "MIMode": "gdb",
	  "miDebuggerPath": "/path/to/gdb"
	}
	```
	- `"request": "launch"` 表明这是一个启动调试的配置。
	- `"program": "${workspaceFolder}/${fileBasenameNoExtension}.exe"` 指定了要启动的程序路径。

	总的来说，`Attach (GDB)`用于连接到已经运行的进程，而`Launch (GDB)`用于从头开始启动并调试一个新的进程。根据你的调试需求选择合适的调试配置。


2）vscode中c/c++: (gdb)Bash on windows Attach (gdb)Bash on windows Launch区别
	在VSCode中，使用C/C++插件进行调试时，"Bash on Windows"指的是在Windows Subsystem for Linux (WSL)环境中运行的Bash shell。这允许你在Windows上使用Linux环境和工具，包括GDB调试器。以下是"Attach (GDB)"和"Launch (GDB)"在"Bash on Windows"环境中的区别：

	### Attach (GDB) Bash on Windows
	- **Attach (GDB)** 配置用于连接到一个已经在WSL环境中运行的Linux进程。
	- 在使用`Attach (GDB)`之前，你需要在WSL环境中手动启动你的程序。
	- 选择`Attach (GDB)`配置后，VSCode会启动GDB并尝试连接到指定的WSL进程。
	- 这种配置允许你对已经在运行的程序进行调试，例如，当你需要在程序运行到特定状态后再开始调试时。

	### Launch (GDB) Bash on Windows
	- **Launch (GDB)** 配置用于在WSL环境中启动一个新的Linux进程，并在程序的入口点处开始调试。
	- 使用`Launch (GDB)`时，VSCode会启动GDB，并在WSL环境中启动你的程序，通常在`main`函数处暂停执行。
	- 这种配置适合大多数调试场景，特别是当你需要从程序的开始处逐步执行代码，检查变量和程序流程时。

	### 配置示例
	在`launch.json`文件中，这两种配置可能如下所示：

	#### Attach (GDB) 配置示例
	```json
	{
	  "name": "Attach (GDB) to WSL",
	  "type": "cppdbg",
	  "request": "attach",
	  "program": "/path/to/your/program",
	  "processId": "1234", // 你需要手动获取正在运行的进程ID
	  "MIMode": "gdb",
	  "miDebuggerPath": "/usr/bin/gdb",
	  "cwd": "/path/to/your/project",
	  "environment": [],
	  "externalConsole": false,
	  "linux": {
		"MIMode": "gdb",
		"miDebuggerPath": "/usr/bin/gdb"
	  }
	}
	```
	- `"request": "attach"` 表明这是一个附加调试的配置。
	- `"processId": "1234"` 是你手动获取的正在运行的进程ID。

	#### Launch (GDB) 配置示例
	```json
	{
	  "name": "Launch (GDB) in WSL",
	  "type": "cppdbg",
	  "request": "launch",
	  "program": "/path/to/your/program",
	  "args": [],
	  "stopAtEntry": false,
	  "cwd": "/path/to/your/project",
	  "environment": [],
	  "MIMode": "gdb",
	  "miDebuggerPath": "/usr/bin/gdb",
	  "externalConsole": false,
	  "linux": {
		"MIMode": "gdb",
		"miDebuggerPath": "/usr/bin/gdb"
	  }
	}
	```
	- `"request": "launch"` 表明这是一个启动调试的配置。
	- `"program": "/path/to/your/program"` 指定了在WSL环境中要启动的程序路径。

	在使用"Bash on Windows"时，确保你的`miDebuggerPath`指向了WSL环境中的GDB路径，而不是Windows路径。此外，`externalConsole`设置为`false`是因为WSL环境不支持外部控制台。

	总结来说，"Attach (GDB)"和"Launch (GDB)"在"Bash on Windows"环境中的主要区别在于一个是连接到已运行的进程，另一个是启动一个新的进程进行调试。根据你的具体需求选择合适的调试方式。

3）vscode中c/c++: (gdb)Pipe Attach (gdb)Pipe Launch区别
	在VSCode中，使用C/C++插件进行调试时，"Pipe Attach (GDB)"和"Pipe Launch (GDB)"是两种通过管道（pipe）与远程shell通信的调试配置方式，它们允许VSCode通过一个中间程序（如SSH）与远程系统进行通信。以下是它们之间的区别：

	### Pipe Launch (GDB)
	- **Pipe Launch (GDB)** 配置用于启动一个新的调试会话，并在远程shell中运行程序。
	- 这种配置通常用于当你需要在远程系统上启动一个新的进程，并进行调试。
	- 在`launch.json`文件中，你需要配置`pipeTransport`选项，指定管道程序（如SSH）及其参数，以及远程系统上的调试器路径。
	- 例如，你可能需要指定SSH命令和参数来连接到远程服务器，并指定远程服务器上的GDB路径。

	### Pipe Attach (GDB)
	- **Pipe Attach (GDB)** 配置用于附加到一个已经在远程shell中运行的进程。
	- 这种配置通常用于当你需要连接到一个已经在远程系统上运行的进程，并进行调试。
	- 在`launch.json`文件中，除了配置`pipeTransport`选项外，你还需要指定`processId`来标识要附加的远程进程。
	- VSCode可以使用`pipeTransport`设置来查询远程机器上的进程，然后你可以选择要附加的进程。

	总结来说，"Pipe Launch (GDB)"用于在远程系统上启动新的调试会话，而"Pipe Attach (GDB)"用于连接到远程系统上已经运行的进程进行调试。这两种方式都通过`pipeTransport`在`launch.json`中配置，允许VSCode通过SSH等管道程序与远程shell通信，实现远程调试的功能。

4）。vscode的c_cpp_properties.json配置
	4.1）。windows下vscode插件使用mingw64编译运行c语言报 stdio.h file not found

		在Windows系统下使用VSCode和MinGW64编译器时遇到`stdio.h file not found`的问题，通常是因为VSCode没有正确配置C/C++项目的头文件路径。以下是解决这个问题的步骤：

		1. **安装MinGW-w64**：
		   - 确保你已经下载并安装了MinGW-w64。你可以从[MinGW-w64官网](https://sourceforge.net/projects/mingw-w64/files/)下载合适的版本。

		2. **配置环境变量**：
		   - 将MinGW-w64的bin目录添加到系统的环境变量中。这样，系统和VSCode都能够识别MinGW-w64的编译器和工具。

		3. **配置`c_cpp_properties.json`文件**：
		   - 在VSCode中，打开你的项目文件夹，然后在`.vscode`目录下找到或创建`c_cpp_properties.json`文件。
		   - 编辑该文件，添加`"C_Cpp.default.includePath"`配置项，指定MinGW-w64的头文件路径。例如：
			 ```json
			 {
			   "configurations": [
				 {
				   "name": "Win32",
				   "includePath": [
					 "${workspaceFolder}/**",
					 "C:/MinGW/include",
					 "C:/MinGW/x86_64-w64-mingw32/include"
				   ],
				   "defines": [],
				   "compilerPath": "C:/MinGW/bin/gcc.exe",
				   "cStandard": "c11",
				   "cppStandard": "c++17",
				   "intelliSenseMode": "gcc-x64"
				 }
			   ],
			   "version": 4
			 }
			 ```
		   - 请将`C:/MinGW`替换为你实际的MinGW-w64安装路径。

		4. **检查头文件路径**：
		   - 确保你添加的路径是正确的，特别是MinGW-w64的路径应该是其根目录下的`include`文件夹。

		5. **重启VSCode**：
		   - 修改设置后，重启VSCode以确保新的设置生效。

		通过上述步骤，你应该能够解决VSCode在使用MinGW64编译器时遇到的`stdio.h file not found`问题。如果问题仍然存在，请检查MinGW-w64的安装路径是否正确，以及是否正确添加到了系统的环境变量中。

	4.2）。c_cpp_properties.json的配置是否可以放到settings.json配置里面

		在VSCode中，`c_cpp_properties.json`文件用于配置C/C++插件的特定设置，包括编译器路径、头文件搜索路径等。这些设置是专门针对C/C++插件的，因此通常不建议将`c_cpp_properties.json`的内容直接放入`settings.json`文件中。

		`settings.json`文件用于存储VSCode的全局或工作区级别的通用设置，比如编辑器字体、主题、快捷键绑定等。将C/C++插件的配置放入`settings.json`可能会导致配置混乱，不易于管理和查找。

		不过，VSCode允许你通过`settings.json`文件来覆盖`c_cpp_properties.json`中的某些设置。例如，你可以在`settings.json`中设置`"C_Cpp.default.includePath"`来覆盖`c_cpp_properties.json`中的默认包含路径。这样做的好处是，你可以在不打开`c_cpp_properties.json`的情况下，通过VSCode的设置界面直接编辑这些配置。

		如果你确实想要在`settings.json`中设置C/C++的配置，可以这样做：

		1. 打开VSCode的设置界面（使用快捷键`Ctrl + ,`）。
		2. 搜索`C_Cpp`，你会看到C/C++插件的相关设置。
		3. 直接在设置界面中编辑或添加配置，比如添加`"C_Cpp.default.includePath"`。
		4. 保存`settings.json`文件。

		请注意，即使你在`settings.json`中设置了这些配置，`c_cpp_properties.json`文件仍然是C/C++插件配置的主要存储位置。如果你需要更复杂的配置，比如定义宏或者配置不同的编译器选项，最好还是在`c_cpp_properties.json`文件中进行设置。

vscode问题：
Client Clang Language Server: connection to server is erroring. Shutting down server.