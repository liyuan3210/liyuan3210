Java
	groovy
Js
	nodejs
	Emscripten简介及初体验
		https://blog.csdn.net/cgs1999/article/details/109032278
	webAssembly调用c字节码
		https://www.ruanyifeng.com/blog/2017/09/asmjs_emscripten.html
Python
	https://www.bilibili.com/video/BV1qW4y1a7fU
	p94-p97 模块，包，第三房包概念
C语言
	windows平台gcc环境编译
	http://nginx.org/en/docs/howto_build_on_win32.html
	MSYS or MSYS2区别？
	https://blog.csdn.net/nodeman/article/details/106431752
	Cygwin、Msys（停止维护）、Msys2、MinGW、Mingw-w64、TDM-GCC 区别 ？
	https://www.cnblogs.com/flyinggod/p/12888060.html
	https://www.bilibili.com/video/BV1k34y1h76e
	Mingw-w64安装及各个包选项区别
	https://blog.csdn.net/zy215215/article/details/123078689
Rust
	https://www.bilibili.com/video/BV1hp4y1k7SV
	rust安装，cargo工程管理
Golang
	https://www.bilibili.com/video/BV1ME411Y71o
	环境变量：GOROOT,Path,GOPATH(项目目录)
x86汇编
	https://www.cnblogs.com/juzaizai/p/15195107.html
	汇编分类
	https://blog.csdn.net/oqqHuTu12345678/article/details/125697207
	https://blog.csdn.net/liigo/article/details/80680929
	汇编：
	https://www.bilibili.com/video/BV1xE411N74T
	linux内核采用多汇编：
	https://blog.csdn.net/oqqHuTu12345678/article/details/125676002
	编译器(开源)：
	https://nasm.us
		安装：
		./configure --prefix=/opt/nasm
》〉》〉》〉》〉》〉》〉》〉》〉》〉》〉》》〉》〉》〉》〉》〉》〉》〉》〉》〉》〉》
./configure --prefix=/opt/nasm

make && make install

代码：
hello.asm

section .data
  hello:     db 'Hello world!',10    ; 'Hello world!' plus a linefeed character
  helloLen:  equ $-hello             ; Length of the 'Hello world!' string
                                     ; (I'll explain soon)
 
section .text
  global _start
 
_start:
  mov eax,4            ; The system call for write (sys_write)
  mov ebx,1            ; File descriptor 1 - standard output
  mov ecx,hello        ; Put the offset of hello in ecx
  mov edx,helloLen     ; helloLen is a constant, so we don't need to say
                       ;  mov edx,[helloLen] to get it's actual value
  int 80h              ; Call the kernel
 
  mov eax,1            ; The system call for exit (sys_exit)
  mov ebx,0            ; Exit with return code of 0 (no error)
  int 80h

编译
nasm -f elf64 hello.asm
如果是32位系统就把elf64改为elf32

链接
ld -s -o hello hello.o

运行
./hello
》〉》〉》〉》〉》〉》〉》〉》〉》〉》〉》》〉》〉》〉》〉》〉》〉》〉》〉》〉》〉》
emscripten官网：
https://emscripten.org/
https://github.com/emscripten-core/emscripten
webassembly官网：
https://webassembly.org/

http://www.uwenku.com/question/p-whwpcqvc-rb.html
https://blog.csdn.net/shuipingtoy/article/details/90512139

docker exec -it myubuntu /bin/bash

git clone https://github.com/emscripten-core/emsdk.git

安装配置Emscripten：
# Fetch the latest registry of available tools.
$ ./emsdk update
# Download and install the latest SDK tools. Need install Python first. 
$ ./emsdk install latest
# Make the "latest" SDK "active" for the current user. (writes ~/.emscripten file)
$ ./emsdk activate latest
# Activate PATH and other environment variables in the current terminal
$ ./emsdk_env.sh
# To update your environment variables 注意 需要source一下，否则emcc不生效
$ source emsdk_env.sh 
# Verifying Emscripten 验证
$ emcc -v


编写c代码：
#include <stdio.h>
int main() {
  printf("hello, world!\n");
  return 0;
}

编译运行：
# 生成 a.out.js
$ emcc.bat helloworld.cpp
# 生成 helloworld.js
$ emcc.bat helloworld.cpp -o helloworld.js
# 生成 helloworld.html 和 helloworld.js,helloworld.wasm
$ emcc.bat helloworld.cpp -o helloworld.html

nodejs运行：
$ node a.out.js或helloworld.js

Emscripten与WebAssembly？？？

可以配置.bashrc环境变量如下（否则每次重启机器都要source）：
source /data/git/emsdk/emsdk_env.sh

》〉》〉》〉》〉》〉》〉》〉》〉》〉》〉》》〉》〉》〉》〉》〉》〉》〉》〉》〉》〉》
/Users/yuanli/data/dev
docker run --name myubuntu3 --net dev-net --ip 172.18.1.32 -it -v /Users/yuanli/data/dev:/data -d registry.cn-shanghai.aliyuncs.com/liyuan3210-repo/myubuntu:v1

docker exec -it myubuntu3 /bin/bash

export GROOVY_HOME=/opt/groovy-4.0.6
export PATH=$GROOVY_HOME/bin:$PATH

groovy -version

hello_groovy.groovy

groovy hello_groovy.groovy

System.out.println("hello world");

每个版本有五个选项可供下载，依次为： 
binary：二进制包 
source：源文件 
documentation：文档 
SDK bundle：SDK包，包含前面三种类型 
Windows installer：windows下的安装文件 
推荐下载SDK bundle。

问题：
jfrog账号是啥

在没有jdk环境验证：
docker run --name myubuntu4 --net dev-net --ip 172.18.1.34 -it -v /Users/yuanli/data/dev:/data -d ubuntu
docker exec -it myubuntu4 /bin/bash

root@744718dafe01:~# groovy -version
groovy: JAVA_HOME not set and cannot find javac to deduce location, please set JAVA_HOME.
》〉》〉》〉》〉》〉》〉》〉》〉》〉》〉》》〉》〉》〉》〉》〉》〉》〉》〉》〉》〉》
linux安装python
https://baijiahao.baidu.com/s?id=1742782855454338816&wfr=spider&for=pc
http://wjhsh.net/yjp372928571-p-12758564.html
Python 安装没有 pip的解决方法
https://blog.csdn.net/weixin_44331765/article/details/121017727
$ python -m ensure pip --upgrade

运行容器
docker run --name myubuntu --net dev-net --ip 172.18.1.30 -it -v /Users/yuanli/data/dev:/data -d registry.cn-shanghai.aliyuncs.com/liyuan3210-repo/myubuntu:v1

docker exec -it myubuntu /bin/bash

apt-get update && apt-get install git -y && apt-get install gcc -y && apt-get install make -y && apt-get install wget -y

mkdir /usr/local/python3

export PYTHON_HOME=/usr/local/python3
export PATH=$PYTHON_HOME/bin:$PATH

sudo apt-get install build-essential gdb lcov pkg-config \
      libbz2-dev libffi-dev libgdbm-dev libgdbm-compat-dev liblzma-dev \
      libncurses5-dev libreadline6-dev libsqlite3-dev libssl-dev \
      lzma lzma-dev tk-dev uuid-dev zlib1g-dev


./configure --prefix=/usr/local/python3 && make && make install


Pip更换源：
root用户的
# mkdir /root/.pip
# cd /root/.pip
# vi pip.conf	//新增pip.conf配置文件
# 更换源配置
[global]
index-url = https://pypi.tuna.tsinghua.edu.cn/simple
	
问题：
1.ImportError: cannot import name 'Mapping' from 'collections'
因为Python3.10版本以后对requests库进行调整，collections中不能直接调用方法Mapping，MutableMapping
* 由于Python的跨平台特性，因此兼容性最好的还是python3.4
https://www.muzhuangnet.com/show/13574.html

2.python, 解决：WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager
* 假设Python3安装在/usr/local/python3
$ cd /usr/local/python3
$ python3 -m venv tutorial-env
$ source tutorial-env/bin/activate
-------------------------------------------------------------------------
参考
https://blog.csdn.net/weixin_42152531/article/details/125723117

下载
https://forge.rust-lang.org/infra/other-installation-methods.html

chmod -R 777 rustup-init

一。安装
root@1fe821b26306:/data# ./rustup-init 

默认选择 1）
1) Proceed with installation (default)
2) Customize installation
3) Cancel installation

To configure your current shell, run:
source "$HOME/.cargo/env"

容器安装需要执行一下source才能识别到
root@1fe821b26306:~# source .bashrc 
root@1fe821b26306:~# source .profile

代码hello.rs
fn main(){
    println!("hello world!");
}

二。编译hello：
rustc hello.rs

三。更新：
rustup update

四。cargo工程管理
cargo new hello_projects

配置环境变量（介绍）：
# rustup home dir
export RUSTUP_HOME=/home/environment/rust/.rustup
# rust cargo home dir
export CARGO_HOME=/home/environment/rust/.cargo

if [-f /home/environment/rust/.cargo/env ] then
./home/environment/rust/.cargo/env
fi 

# 用于更新 toolchain
export RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static
# 用于更新 rustup
export RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup


配置cargo镜像源（解决cargo build无法下载依赖包）
配置cargo镜像源/root/.cargo/config
# 清华大学
[source.tuna]
registry="https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git"
-------------------------------------------------------------------------
export GO_HOME=/opt/go				//go home	
export PATH=$GO_HOME/bin:$PATH			//go path路径
export GOPATH=/data/goprojects			//go项目目录,感觉没啥用？？？

GOPATH:
	go install/go get和 go的工具等会用到GOPATH环境变量.
	GOPATH是作为编译后二进制的存放目的地和import包时的搜索路径 (其实也是你的工作目录, 你可以在src下创建你自己的go源文件, 然后开始工作)。

GOPATH之下主要包含三个目录: bin、pkg、src：
	bin目录主要存放可执行文件； pkg目录存放编译好的库文件， 主要是*.a文件； src目录下主要存放go的源文件

goprojects目录结构：
	goprojects/src/go_code/project1,project2

代码：
package main
import "fmt"

func main(){
	fmt.Println("hello go")
}

直接运行：go run hello.go
编译： 	go build hello.go


